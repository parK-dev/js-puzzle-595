{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./lib/puzzle.js"],"names":[],"mappings":";QAAA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;;QAEA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;;;QAGA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;QACA,0CAA0C,gCAAgC;QAC1E;QACA;;QAEA;QACA;QACA;QACA,wDAAwD,kBAAkB;QAC1E;QACA,iDAAiD,cAAc;QAC/D;;QAEA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA,yCAAyC,iCAAiC;QAC1E,gHAAgH,mBAAmB,EAAE;QACrI;QACA;;QAEA;QACA;QACA;QACA,2BAA2B,0BAA0B,EAAE;QACvD,iCAAiC,eAAe;QAChD;QACA;QACA;;QAEA;QACA,sDAAsD,+DAA+D;;QAErH;QACA;;;QAGA;QACA;;;;;;;;;;;;AClFA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH,CAAC,E","file":"main.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"./lib/puzzle.js\");\n","// /////////////\n// // Rehearsal\n// /////////////\n\n// 1. Select elements: button, hint\nconst button = document.querySelector(\"#show-hint\");\nconst hint = document.querySelector(\".hint\");\n\n// 2. Listen to an event (click on the button)\nbutton.addEventListener(\"click\", (event) => {\n  // 3. Change the DOM (show the hint)\n  hint.classList.add(\"active\");\n});\n\n// /////////////\n// The GAME!\n// /////////////\n\nconst checkWin = (cells) => {\n  const order = [];\n  cells.forEach((cell) => {\n    order.push(cell.innerText);\n  });\n  console.log(order.join());\n  return (order.join() == \"1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,\");\n};\n\nconst swapCells = (clickedCell) => {\n  const empty = document.querySelector('.empty');\n  // copy the innerText of clicked cell to empty cell\n  empty.innerText = clickedCell.innerText;\n  // add class .empty cell to clicked cell\n  clickedCell.classList.add(\"empty\");\n  // remove class .empty from empty cell\n  empty.classList.remove(\"empty\");\n  // remove innerText from clicked cell\n  clickedCell.innerText = '';\n};\n\nconst checkIfEmptyNearby = (clickedCell) => {\n  // get cell indexes of clickedCell\n  const clickedCellRow = clickedCell.parentElement.rowIndex;\n  const clickedCellCol = clickedCell.cellIndex;\n  \n  // get cell indexes of empty cell\n  const empty = document.querySelector(\".empty\");\n  const emptyRow = empty.parentElement.rowIndex;\n  const emptyCol = empty.cellIndex;\n  // check if next to each other\n  const rowDiff = clickedCellRow - emptyRow;\n  const colDiff = clickedCellCol - emptyCol;\n  // Almost good ðŸ‘‡ðŸ˜… but...\n  // return (Math.abs(rowDiff) == 1 && Math.abs(colDiff) == 1 );\n  return (Math.abs(rowDiff) + Math.abs(colDiff)) == 1 ;\n};\n\n// 1. Select all element (all title and cell)\nconst cells = document.querySelectorAll(\"td\");\n// 2. Iterate\ncells.forEach((cell) => {\n  // 3. Listen to an event (click)\n  cell.addEventListener(\"click\", (event) => {\n    // 4. Check if empty space near the clicked cell\n    const clickedCell = event.currentTarget;\n    if (checkIfEmptyNearby(clickedCell)) {\n      // 5. Swap clicked cell with empty cell\n      swapCells(clickedCell);\n      // 6. Check if win\n      if ( checkWin(cells) ) {\n        alert(\"We won!\");\n      }\n    }\n  });\n});"],"sourceRoot":""}